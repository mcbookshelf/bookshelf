name: 🏷️ Pre-Release Build

on:
  push:
    branches: ["master"]

permissions:
  contents: write

jobs:
  check:
    name: 🔍 Pre-Release Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      release_tag: ${{ steps.check.outputs.release_tag }}
      release_name: ${{ steps.check.outputs.release_name }}
      version_exists: ${{ steps.check.outputs.version_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: Fetch All Tags
        run: git fetch --tags
      - name: Check Versions
        id: check
        run: |
          VERSION=$(python -c "from bookshelf import version; print(version())")
          MC_VERSIONS=$(python -c "from bookshelf import mc_versions; print(mc_versions())")

          echo "release_tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=Nightly v$VERSION (Minecraft $MC_VERSIONS)" >> $GITHUB_OUTPUT

          if [ -n "$(git tag -l "v$VERSION")" ]; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug Outputs
        run: |
          echo "release_tag=${{ steps.check.outputs.release_tag }}"
          echo "release_name=${{ steps.check.outputs.release_name }}"
          echo "version_exists=${{ steps.check.outputs.version_exists }}"

  release:
    name: 📦 Pre-Release Build
    needs: check
    if: ${{ needs.check.outputs.version_exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set Up Git User
        uses: fregante/setup-git-user@v2
      - name: Install PDM
        uses: pdm-project/setup-pdm@v4
        with:
          cache: true
      - name: Install Dependencies
        run: pdm install
      - name: Build Release Files
        run: pdm run modules release
      - name: Delete Existing Nightly Release
        continue-on-error: true
        run: |
          gh release delete nightly --yes
          git push --delete origin nightly
      - name: Create New Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: docs/changelog/${{ needs.check.outputs.release_tag }}.md
          name: ${{ needs.check.outputs.release_name }}
          tag_name: nightly
          prerelease: true
          files: release/*.zip
